--[[
  ____    _____    ___    ____    _ 
 / ___|  |_   _|  / _ \  |  _ \  | |
 \___ \    | |   | | | | | |_) | | |
  ___) |   | |   | |_| | |  __/  |_|
 |____/    |_|    \___/  |_|     (_)
                                    
 You have entered a LunarCloak obfuscated script, any sort of tampering will get you blacklisted from all scripts licensed with LunarCloak.
]]---

local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"..",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return "";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return "";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select("#",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select("#",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=8) then if (Enum<=3) then if (Enum<=1) then if (Enum==0) then local A=Inst[2];Stk[A]=Stk[A]();else Stk[Inst[2]]=Inst[3]~=0 ;end elseif (Enum>2) then Stk[Inst[2]]={};else local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=5) then if (Enum>4) then Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=6) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);elseif (Enum==7) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Top));else local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end elseif (Enum<=12) then if (Enum<=10) then if (Enum>9) then local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);else Stk[Inst[2]]=Inst[3];end elseif (Enum==11) then Stk[Inst[2]]=Stk[Inst[3]];else do return;end end elseif (Enum<=14) then if (Enum>13) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=15) then VIP=Inst[3];elseif (Enum>16) then Stk[Inst[2]]=Env[Inst[3]];else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or "?" ;error("Script error at ["   .. line   .. "]:"   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCall("LOL!3A3O00030A3O006C6F6164737472696E6703043O0067616D6503073O00482O7470476574034C3O00682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F55492D496E746572666163652F437573746F6D4649656C642F6D61696E2F5261794669656C642E6C7561030C3O0043726561746557696E646F7703043O004E616D6503123O00436F2O6E65637458207C20466C69636B6572030C3O004C6F6164696E675469746C6503083O00436F2O6E65637458030F3O004C6F6164696E675375627469746C65030F3O004C6F6164696E672067616D653O2E03133O00436F6E66696775726174696F6E536176696E6703073O00456E61626C65640100030A3O00466F6C6465724E616D650003083O0046696C654E616D6503073O004269672048756203073O00446973636F726403063O00496E76697465034O00030D3O0052656D656D6265724A6F696E7303093O004B657953797374656D030B3O004B657953652O74696E677303053O005469746C6503083O005375627469746C65030A3O004B65792053797374656D03043O004E6F746503093O005369726975734B657903073O00536176654B65792O01030F3O00477261624B657946726F6D536974652O033O004B657903053O0048652O6C6F03093O0043726561746554616203043O00486F6D65028O00030D3O0043726561746553656374696F6E03073O0057656C636F6D65030B3O004372656174654C6162656C03183O00436F2O6E6563745820697320616C776179732066722O652E03263O00496620796F75207061696420666F7220746869732C20796F7520676F74207363612O6D65642E031F3O00546865206F6E6C7920646576656C6F7065722069732047616D657346616D6503203O00446973636F72643A20646973636F72642E696F2F6368692O6C73706F7472627803073O00466C69636B657203023O003A2803533O00556E666F7274756E6174656C792C20466C69636B6572206973206861726420746F206578706C6F6974206D65616E696E6720776520646F6E27742068617665206D7563682073637269707473206F6E2069742E033D3O00546F2068656C7020757320612O64206D6F726520736372697074732C2066692O6C2074686520666F726D20696E20746865206C696E6B2062656C6F772E03233O00682O7470733A2O2F666F726D732E676C652F585551757958764A4B6175705138457837030B3O0043686174204C6F2O676572030C3O00437265617465546F2O676C65030B3O00416374697661746520434C03043O00496E666F03173O00546F2O676C65207468652043686174204C6F2O6765722E030C3O0043752O72656E7456616C756503043O00466C616703083O00636C746F2O676C6503083O0043612O6C6261636B005B3O0012113O00013O001211000100023O00200E000100010003001209000300044O0002000100034O00075O00026O0001000200200E00013O00052O000300033O00070030050003000600070030050003000800090030050003000A000B2O000300043O00030030050004000D000E0030050004000F0010003005000400110012002O100003000C00042O000300043O00030030050004000D000E00300500040014001500300500040016000E002O1000030013000400300500030017000E2O000300043O00070030050004001900090030050004001A001B0030050004001C001500300500040011001D0030050004001E001F00300500040020000E003005000400210022002O100003001800042O000800010003000200200E000200010023001209000400243O001209000500254O000800020005000200200E000300020026001209000500274O000100066O000800030006000200200E000400020028001209000600294O000B000700034O000800040007000200200E0005000200280012090007002A4O000B000800034O000800050008000200200E0006000200280012090008002B4O000B000900034O000800060009000200200E0007000200280012090009002C4O000B000A00034O00080007000A000200200E000800010023001209000A002D3O001209000B00254O00080008000B000200200E000900080026001209000B002E4O0001000C6O00080009000C000200200E000A00080028001209000C002F4O000B000D00094O0008000A000D000200200E000B00080028001209000D00304O000B000E00094O0008000B000E000200200E000C00080028001209000E00314O000B000F00094O0008000C000F000200200E000D00080026001209000F00324O0001001000014O0008000D0010000200200E000E000800332O000300103O000500300500100006003400300500100035003600300500100037000E00300500100038003900020600115O002O100010003A00112O0008000E001000022O000C3O00013O00013O00093O002O0103043O0067616D6503073O00506C6179657273030B3O004C6F63616C506C6179657203093O005465616D436F6C6F72030A3O00427269636B436F6C6F722O033O006E6577030A3O005265612O6C792072656403113O004D656469756D2073746F6E65206772657901143O0026043O000B0001000100040F3O000B0001001211000100023O00200D00010001000300200D000100010004001211000200063O00200D000200020007001209000300084O000A000200020002002O1000010005000200040F3O00130001001211000100023O00200D00010001000300200D000100010004001211000200063O00200D000200020007001209000300094O000A000200020002002O100001000500022O000C3O00017O00143O00103O00103O00113O00113O00113O00113O00113O00113O00113O00113O00113O00133O00133O00133O00133O00133O00133O00133O00133O00153O005B3O00013O00013O00013O00013O00013O00013O00013O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00023O00033O00033O00033O00033O00043O00043O00043O00043O00053O00053O00053O00053O00063O00063O00063O00063O00073O00073O00073O00073O00083O00083O00083O00083O00093O00093O00093O00093O000A3O000A3O000A3O000A3O000B3O000B3O000B3O000B3O000C3O000C3O000C3O000C3O000D3O000D3O000D3O000D3O000E3O000E3O000E3O000E3O000F3O000F3O000F3O000F3O000F3O000F3O00153O00153O000F3O00153O00",GetFEnv(),...);